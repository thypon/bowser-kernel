/*
 * ov9740_tables.h - table header for YUV camera sensor OV9740 driver.
 *
 * Copyright (C) 2012 NVIDIA Corporation.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307, USA
 */

#ifndef OV9740_I2C_TABLES
#define OV9740_I2C_TABLES

struct ov9740_reg {
	u16 addr;
	u16 val;
};

#define OV9740_TABLE_WAIT_MS 0
#define OV9740_TABLE_END 1
#define OV9740_MAX_RETRIES 3

static struct ov9740_reg exposure_0[] = {
	{0x5580, 0x04},
	{0x5587, 0x00},
	{0x5588, 0x01},
	{OV9740_TABLE_END, 0x0000}
};

static struct ov9740_reg exposure_negative_1[] = {
	{0x5580, 0x04},
	{0x5587, 0x10},
	{0x5588, 0x09},
	{OV9740_TABLE_END, 0x0000}
};

static struct ov9740_reg exposure_negative_2[] = {
	{0x5580, 0x04},
	{0x5587, 0x20},
	{0x5588, 0x09},
	{OV9740_TABLE_END, 0x0000}
};

static struct ov9740_reg exposure_negative_3[] = {
	{0x5580, 0x04},
	{0x5587, 0x30},
	{0x5588, 0x09},
	{OV9740_TABLE_END, 0x0000}
};

static struct ov9740_reg exposure_1[] = {
	{0x5580, 0x04},
	{0x5587, 0x10},
	{0x5588, 0x01},
	{OV9740_TABLE_END, 0x0000}
};

static struct ov9740_reg exposure_2[] = {
	{0x5580, 0x04},
	{0x5587, 0x20},
	{0x5588, 0x01},
	{OV9740_TABLE_END, 0x0000}
};

static struct ov9740_reg exposure_3[] = {
	{0x5580, 0x04},
	{0x5587, 0x30},
	{0x5588, 0x01},
	{OV9740_TABLE_END, 0x0000}
};

static struct ov9740_reg *exposure_table[] = {
	[OV9740_EXPOSURE_0] = exposure_0,
	[OV9740_EXPOSURE_NEGATIVE_1] = exposure_negative_1,
	[OV9740_EXPOSURE_NEGATIVE_2] = exposure_negative_2,
	[OV9740_EXPOSURE_NEGATIVE_3] = exposure_negative_3,
	[OV9740_EXPOSURE_1] = exposure_1,
	[OV9740_EXPOSURE_2] = exposure_2,
	[OV9740_EXPOSURE_3] = exposure_3,
};

static struct ov9740_reg wb_auto[] = {
	{0x3406, 0x00},
	{OV9740_TABLE_END, 0x0000}
};

static struct ov9740_reg wb_incandescent[] = {
	{0x3400, 0x05},
	{0x3401, 0x46},
	{0x3402, 0x04},
	{0x3403, 0x00},
	{0x3404, 0x08},
	{0x3405, 0xe4},
	{0x3406, 0x01},
	{OV9740_TABLE_END, 0x0000}
};

static struct ov9740_reg wb_daylight[] = {
	{0x3400, 0x08},
	{0x3401, 0x0c},
	{0x3402, 0x04},
	{0x3403, 0x00},
	{0x3404, 0x04},
	{0x3405, 0xbc},
	{0x3406, 0x01},
	{OV9740_TABLE_END, 0x0000}
};

static struct ov9740_reg wb_fluorescent[] = {
	{0x3400, 0x06},
	{0x3401, 0xcf},
	{0x3402, 0x04},
	{0x3403, 0x00},
	{0x3404, 0x07},
	{0x3405, 0x8b},
	{0x3406, 0x01},
	{OV9740_TABLE_END, 0x0000}
};

static struct ov9740_reg wb_cloudy[] = {
	{0x3400, 0x09},
	{0x3401, 0x02},
	{0x3402, 0x04},
	{0x3403, 0x00},
	{0x3404, 0x04},
	{0x3405, 0x87},
	{0x3406, 0x01},
	{OV9740_TABLE_END, 0x0000}
};

static struct ov9740_reg *wb_table[] = {
	[OV9740_WB_AUTO] = wb_auto,
	[OV9740_WB_INCANDESCENT] = wb_incandescent,
	[OV9740_WB_DAYLIGHT] = wb_daylight,
	[OV9740_WB_FLUORESCENT] = wb_fluorescent,
	[OV9740_WB_CLOUDY] = wb_cloudy,
};

struct ov9740_info {
    int mode;
    struct i2c_client *i2c_client;
    struct ov9740_platform_data *pdata;
};

static struct ov9740_reg mode_1280x720[] = {
    /* PLL Control MIPI bit rate/lane = 448MHz, 16-bit mode.
    * Output size: 1280x720 (0, 0) - (2623, 1951),
    * Line Length = 1886, Frame Length = 990.
    */
    {0x0103, 0x01},
    {0x0101, 0x01}, //Orientation
    {OV9740_TABLE_WAIT_MS, 5},
    {0x3104, 0x20}, //PLL mode control
    {0x0305, 0x03},
    {0x0307, 0x4c},
    {0x0303, 0x01},
    {0x0301, 0x08},
    {0x3010, 0x01},
    {OV9740_TABLE_WAIT_MS, 5},

    {0x0340, 0x03}, // ;; Timing setting: VTS
    {0x0341, 0x07},
    {0x0342, 0x06},
    {0x0343, 0x62},
    {0x0344, 0x00},
    {0x0345, 0x08},
    {0x0346, 0x00},
    {0x0347, 0x04},
    {0x0348, 0x05},
    {0x0349, 0x0c},
    {0x034a, 0x02},
    {0x034b, 0xd8},
    {0x034c, 0x05},
    {0x034d, 0x00},
    {0x034e, 0x02},
    {0x034f, 0xd0},
    {OV9740_TABLE_WAIT_MS, 5},

    {0x3002, 0x00}, // ;; Output select
    {0x3004, 0x00},
    {0x3005, 0x80},
    {0x3009, 0x80},
    {0x3012, 0x70}, // MIPI control
    {0x3013, 0x60}, // MIPI control
    {0x3014, 0x01}, // MIPI control
    {0x301f, 0x03}, // MIPI control

    {0x3026, 0x00}, // ;; Output select
    {0x3027, 0x80},
    {OV9740_TABLE_WAIT_MS, 5},

    {0x3601, 0x40}, // Analog control
    {0x3602, 0x16},
    {0x3603, 0xaa},
    {0x3604, 0x0c},
    {0x3610, 0xa1},
    {0x3612, 0x24},
    {0x3620, 0x66},
    {0x3621, 0xc0},
    {0x3622, 0x9f},
    {0x3630, 0xd2},
    {0x3631, 0x5e},
    {0x3632, 0x27},
    {0x3633, 0x50},

    {0x3703, 0x42}, // Sensor control
    {0x3704, 0x10},
    {0x3705, 0x45},
    {0x3707, 0x11},

    {0x3817, 0x94}, // Timing control
    {0x3819, 0x6e},
    {0x3831, 0x40},
    {0x3833, 0x04},
    {0x3835, 0x04},
    {0x3837, 0x01},

    {0x3503, 0x10}, // AEC control
    {0x3a18, 0x00},
    {0x3a19, 0xf8},
    {0x3a1a, 0x05},
    {0x3a11, 0x90},
    {0x3a1b, 0x4a},
    {0x3a0f, 0x48},
    {0x3a10, 0x44},
    {0x3a1e, 0x42},
    {0x3a1f, 0x22},

    {0x3a08, 0x00}, // Banding filter
    {0x3a09, 0xe8},
    {0x3a0e, 0x03},
    {0x3a14, 0x06},
    {0x3a15, 0x58},
    {0x3a0a, 0x00},
    {0x3a0b, 0xc0},
    {0x3a0d, 0x04},
    {0x3a02, 0x18},
    {0x3a03, 0x20},
    {0x3a05, 0x30},

    {0x3a21, 0x18},
    {0x3a17, 0x02},
    {0x3c01, 0x80},

    {0x3c0a, 0x9c}, // 50/60 detection
    {0x3c0b, 0x3f},

    {0x4002, 0x45}, // BLC control
    {0x4005, 0x18},

    {0x4601, 0x16}, // VFIFO control
    {0x460e, 0x82},

    {0x4702, 0x04}, // DVP control
    {0x4704, 0x00},
    {0x4706, 0x08},

    {0x4800, 0x44}, // MIPI control
    {0x4801, 0x0f},
    {0x4803, 0x05},
    {0x4805, 0x10},
    {0x4837, 0x20},

    {0x5000, 0xff}, // ISP control
    {0x5001, 0xff},
    {0x5003, 0xff},

    {0x5180, 0xf0}, // AWB
    {0x5181, 0x00},
    {0x5182, 0x41},
    {0x5183, 0x42},
    {0x5184, 0x82},
    {0x5185, 0x6a},
    {0x5186, 0xf5},
    {0x5187, 0xa8},
    {0x5188, 0x17},
    {0x5189, 0x3b},
    {0x518a, 0x27},
    {0x518b, 0x41},
    {0x518c, 0x35},
    {0x518d, 0xf0},
    {0x518e, 0x10},
    {0x518f, 0xff},
    {0x5190, 0x00},
    {0x5191, 0xff},
    {0x5192, 0x00},
    {0x5193, 0xff},
    {0x5194, 0x00},

    {0x529a, 0x02}, // DNS
    {0x529b, 0x08},
    {0x529c, 0x0a},
    {0x529d, 0x10},
    {0x529e, 0x10},
    {0x529f, 0x28},
    {0x52a0, 0x32},
    {0x52a2, 0x00},
    {0x52a3, 0x02},
    {0x52a4, 0x00},
    {0x52a5, 0x04},
    {0x52a6, 0x00},
    {0x52a7, 0x08},
    {0x52a8, 0x00},
    {0x52a9, 0x10},
    {0x52aa, 0x00},
    {0x52ab, 0x38},
    {0x52ac, 0x00},
    {0x52ad, 0x3c},
    {0x52ae, 0x00},
    {0x52af, 0x4c},

    {0x530d, 0x06}, // CIP

    {0x5380, 0x01}, // CMX
    {0x5381, 0x00},
    {0x5382, 0x00},
    {0x5383, 0x17},
    {0x5384, 0x00},
    {0x5385, 0x01},
    {0x5386, 0x00},
    {0x5387, 0x00},
    {0x5388, 0x01},
    {0x5389, 0x0d},
    {0x538a, 0x00},
    {0x538b, 0x26},
    {0x538c, 0x00},
    {0x538d, 0x00},
    {0x538e, 0x00},
    {0x538f, 0x1a},
    {0x5390, 0x00},
    {0x5391, 0xbb},
    {0x5392, 0x00},
    {0x5393, 0xa0},
    {0x5394, 0x18},

    {0x5401, 0x2c}, // Contrast
    {0x5403, 0x28},
    {0x5404, 0x06},
    {0x5405, 0xe0},

    {0x5480, 0x04}, // Y Gamma
    {0x5481, 0x12},
    {0x5482, 0x27},
    {0x5483, 0x49},
    {0x5484, 0x57},
    {0x5485, 0x66},
    {0x5486, 0x75},
    {0x5487, 0x81},
    {0x5488, 0x8c},
    {0x5489, 0x95},
    {0x548a, 0xa5},
    {0x548b, 0xb2},
    {0x548c, 0xc8},
    {0x548d, 0xd9},
    {0x548e, 0xec},


    {0x5490, 0x01}, // UV Gamma
    {0x5491, 0xc0},
    {0x5492, 0x03},
    {0x5493, 0x00},
    {0x5494, 0x03},
    {0x5495, 0xe0},
    {0x5496, 0x03},
    {0x5497, 0x10},
    {0x5498, 0x02},
    {0x5499, 0xac},
    {0x549a, 0x02},
    {0x549b, 0x75},
    {0x549c, 0x02},
    {0x549d, 0x44},
    {0x549e, 0x02},
    {0x549f, 0x20},
    {0x54a0, 0x02},
    {0x54a1, 0x07},
    {0x54a2, 0x01},
    {0x54a3, 0xec},
    {0x54a4, 0x01},
    {0x54a5, 0xc0},
    {0x54a6, 0x01},
    {0x54a7, 0x9b},
    {0x54a8, 0x01},
    {0x54a9, 0x63},
    {0x54aa, 0x01},
    {0x54ab, 0x2b},
    {0x54ac, 0x01},
    {0x54ad, 0x22},

    {0x5501, 0x1c}, // UV adjust
    {0x5502, 0x00},
    {0x5503, 0x40},
    {0x5504, 0x00},
    {0x5505, 0x80},

    {0x5800, 0x3f}, // LENC setting
    {0x5801, 0x2c},
    {0x5802, 0x25},
    {0x5803, 0x26},
    {0x5804, 0x2c},
    {0x5805, 0x3f},
    {0x5806, 0x10},
    {0x5807, 0x0d},
    {0x5808, 0x0a},
    {0x5809, 0x0a},
    {0x580a, 0x0d},
    {0x580b, 0x18},
    {0x580c, 0x06},
    {0x580d, 0x03},
    {0x580e, 0x00},
    {0x580f, 0x01},
    {0x5810, 0x04},
    {0x5811, 0x08},
    {0x5812, 0x05},
    {0x5813, 0x02},
    {0x5814, 0x00},

    {0x5815, 0x00},
    {0x5816, 0x02},
    {0x5817, 0x09},
    {0x5818, 0x0d},
    {0x5819, 0x09},
    {0x581a, 0x06},
    {0x581b, 0x07},
    {0x581c, 0x0a},
    {0x581d, 0x11},
    {0x581e, 0x2d},
    {0x581f, 0x1f},
    {0x5820, 0x1a},
    {0x5821, 0x1c},
    {0x5822, 0x21},
    {0x5823, 0x37},
    {0x5824, 0x66},
    {0x5825, 0x8e},
    {0x5826, 0x6c},
    {0x5827, 0x8a},
    {0x5828, 0x88},
    {0x5829, 0x4e},

    {0x582a, 0x68},
    {0x582b, 0x68},
    {0x582c, 0x6a},
    {0x582d, 0x6a},
    {0x582e, 0x48},
    {0x582f, 0x82},
    {0x5830, 0x80},
    {0x5831, 0x82},
    {0x5832, 0x66},
    {0x5833, 0x4e},
    {0x5834, 0x66},
    {0x5835, 0x66},
    {0x5836, 0x66},
    {0x5837, 0x68},
    {0x5838, 0x0a},
    {0x5839, 0x4e},
    {0x583a, 0x2c},
    {0x583b, 0x4c},
    {0x583c, 0x88},
    {0x583d, 0x8e},
    {0x583e, 0xf0},
    {0x5842, 0x02},
    {0x5843, 0x5e},
    {0x5844, 0x04},
    {0x5845, 0x32},
    {0x5846, 0x03},
    {0x5847, 0x29},
    {0x5848, 0x02},
    {0x5849, 0xcc},

    {0x3a00, 0x7c}, // night mode 1/2
    {0x3a02, 0x06},
    {0x3a03, 0x00},

    {0x530d, 0x07}, // Sharpness 1-1
    {0x530c, 0x01},
    {0x529a, 0x01},
    {0x529b, 0x04},
    {0x529c, 0x08},
    {0x529d, 0x09},
    {0x529e, 0x09},

    {0x5019, 0x02},  // Change YUV order

    {0x0100, 0x01},    // start streaming
    {OV9740_TABLE_END, 0x0000}
};

enum {
    OV9740_MODE_1280x720,
};

static struct ov9740_reg *mode_table[] = {
    [OV9740_MODE_1280x720] = mode_1280x720,
};

#endif
